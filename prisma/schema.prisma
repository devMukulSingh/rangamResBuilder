 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id              String            @id@default(uuid())
  email           String            @unique
  goal            Goal?             @relation("userToGoal")
  personalInfo    PersonalInfo?     @relation("userToPersonalInfo")
  skills          Skills[]          @relation("userToSkills")
  experiences     Experience[]      @relation("userToExperience")
  educations      Education[]       @relation("userToEducation")
  projects        Project[]         @relation("userToProject")
  languages       Language[]        @relation("userToLanguage")
  contacts        Contact?          @relation("userToContact")
  achievements    Achievement[]      @relation("userToAchievement")
}
model Goal{
  id                  String              @id@default(uuid())
  name                String              
  userId              String              @unique 
  user                User                @relation("userToGoal",fields: [userId],references: [id])
}
model PersonalInfo{
  id                    String            @id@default(uuid())
  userId                String            @unique
  user                  User              @relation("userToPersonalInfo",fields: [userId],references: [id],onDelete:Cascade)
  fullName              String
  email                 String            @unique
  bio                   String            @db.VarChar(400)    
  profession            Profession?        @relation("personalInfoToProfession")
  countryCode           CountryCode?        @relation("personalInfoToCountryCode") 
  mobile                String
  state                 State?             @relation("personalInfoToState") 
  address               String? 
  dob                   String? 
  birthPlace            BirthPlace?       @relation("personalInfoToBirthPlace") 
  city                  City?         @relation("personalInfoToCity") 
}
model BirthPlace{
   id                    String            @id@default(uuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToBirthPlace",fields: [personalId],references: [id])
}
model City{
   id                    String            @id@default(uuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToCity",fields: [personalId],references: [id])
}
model State{
   id                    String            @id@default(uuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToState",fields: [personalId],references: [id])
}
model Profession{
  id                    String            @id@default(uuid())
  name                  String
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToProfession",fields: [personalId],references: [id])
}
model CountryCode{
   id                    String            @id@default(uuid())
  code                  String
 personalId            String            @unique
  personalInfo         PersonalInfo      @relation("personalInfoToCountryCode",fields: [personalId],references: [id])
}

model Skills{
  id                      String                    @id@default(uuid())
  skillName               String                    
  userId                  String                       
  user                    User                      @relation("userToSkills",fields: [userId],references: [id],onDelete:Cascade)
}

model Experience{
  id                              String                    @id@default(uuid())
  userId                          String                    
  user                            User                      @relation("userToExperience",references: [id],fields: [userId],onDelete:Cascade)
  companyName                     String?
  jobTitle                        String?
  startDate                       String?
  endDate                         String?
  checkboxWorkingStatus           Boolean?
  checkboxVolunteering            Boolean?
  checkboxInternship              Boolean?
  description                     String?                    @db.VarChar(400)    
  // competences                  Competence[]              @relation("experienceToCompetence")
  competences                     Json          
  address                         String?
  employer                        String?
}

// model Competence{
//   id                              String                       @id@default(uuid())
//   name                            String
//   description                     String                    @db.VarChar(300)    
//   experienceId                    String                   
//   experience                      Experience                @relation("experienceToCompetence",fields: [experienceId],references: [id],onDelete:Cascade)
// }
model Education{
  id                              String                       @id@default(uuid())
  schoolName                      String
  degree                          String
  speciality                      String
  startDate                       String
  endDate                         String?
  checkboxPursuing                Boolean?
  schoolLocation                  String?
  userId                          String                    
  user                            User                      @relation("userToEducation",references: [id],fields: [userId],onDelete:Cascade)
}

model Contact{
  id                              String                       @id@default(uuid())
  userId                          String                       @unique
  user                            User                      @relation("userToContact",references: [id],fields: [userId],onDelete:Cascade)
  linkedIn                        String?
  github                          String?
  twitter                         String?
  portfolio                       String?
}

model Achievement{
  id                              String                       @id@default(uuid())
  userId                          String                       
  user                            User                      @relation("userToAchievement",references: [id],fields: [userId],onDelete:Cascade)
  name                            String?
}

model Project{
  id                              String                    @id@default(uuid())
  userId                          String                      
  user                            User                      @relation("userToProject",references: [id],fields: [userId],onDelete:Cascade)
  projectName                     String?
  projectUrl                      String?
  description                     String?                   @db.VarChar(400)    
}

model Language{
  id                              String                     @id@default(uuid())
  userId                          String                       
  user                            User                        @relation("userToLanguage",references: [id],fields: [userId],onDelete:Cascade)
  name                            String?
  strength                        String?
}