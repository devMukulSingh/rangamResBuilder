 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id              String            @id@default(cuid())       
  goal            Goal?             @relation("userToGoal")
  skills          Skill[]           @relation("_UserToSkill")
  personalInfo    PersonalInfo?     @relation("userToPersonalInfo")
  experiences     Experience[]      @relation("userToExperience")
  educations      Education[]       @relation("userToEducation")
  projects        Project[]         @relation("userToProject")
  languages       Language[]        @relation("userToLanguage")
  contacts        Contact?          @relation("userToContact")
  achievements    Achievement[]     @relation("userToAchievement")
  createdAt       DateTime          @default(now())
}
model Goal{
  id                  String             @id@default(cuid())
  name                String              
  userId              String             @unique          
  user                User               @relation("userToGoal",fields: [userId],references: [id],onDelete: Cascade)
}
model PersonalInfo{
  id                    String            @id@default(cuid())
  professionId          String            @unique
  // countryCodeId         String
  userId                String            @unique
  user                  User              @relation("userToPersonalInfo",fields: [userId],references: [id],onDelete: Cascade)
  fullName              String
  email                 String            
  bio                   String            @db.VarChar(400)    
  profession            Profession        @relation("personalInfoToProfession",fields: [professionId],references: [id],onDelete: Cascade)
  // countryCode           CountryCode       @relation("personalInfoToCountryCode",fields: [countryCodeId],references: [id],onDelete: Cascade) 
  mobile                String
  state                 State?            @relation("personalInfoToState") 
  address               String? 
  dob                   String? 
  birthPlace            BirthPlace?       @relation("personalInfoToBirthPlace") 
  city                  City?             @relation("personalInfoToCity") 
}
model BirthPlace{
   id                   String            @id@default(cuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToBirthPlace",fields: [personalId],references: [id],onDelete: Cascade)
}
model City{
   id                    String           @id@default(cuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToCity",fields: [personalId],references: [id],onDelete: Cascade)
}
model State{
   id                    String           @id@default(cuid())
  name                  String?
  personalId            String            @unique
  personalInfo          PersonalInfo      @relation("personalInfoToState",fields: [personalId],references: [id],onDelete: Cascade)
}
model Profession{
  id                    String            @id@default(cuid())
  name                  String
  personalInfo         PersonalInfo?      @relation("personalInfoToProfession")
}
// model CountryCode{
//    id                    String            @id@default(cuid())
//   code                  String
//   personalInfos         PersonalInfo[]     @relation("personalInfoToCountryCode")
// }

model Skill{
  id                      String                    @id@default(cuid())
  skillName               String
  users                   User[]                    @relation("_UserToSkill")
}

model Experience{
  id                              String                    @id@default(cuid())
  userId                          String                    
  user                            User                      @relation("userToExperience",references: [id],fields: [userId],onDelete: Cascade)
  companyName                     String                  
  jobTitle                        JobTitle?                 @relation("experienceToJobTitle")
  startDate                       String
  endDate                         String?
  checkboxWorkingStatus           Boolean?
  checkboxVolunteering            Boolean?
  checkboxInternship              Boolean?
  description                     String?                    @db.VarChar(800)    
  address                         String?
  employer                        String?
}

model JobTitle{
    id                              String                    @id@default(cuid())
    name                            String?                   
    competences                     Competence[]              @relation("jobTitleToCompetence")
    experienceId                    String                    @unique
    experience                     Experience                 @relation("experienceToJobTitle",fields: [experienceId],references: [id],onDelete: Cascade)
}
model Competence{
  id                              String                      @id@default(cuid())
  name                            String?
  description                     String?                     @db.VarChar(800)    
  experienceId                    String                   
  jobTitle                        JobTitle                    @relation("jobTitleToCompetence",fields: [experienceId],references: [experienceId],onDelete: Cascade)
}
model Education{
  id                              String                      @id@default(cuid())
  schoolName                      String
  degree                          String
  speciality                      String
  startDate                       String
  endDate                         String?
  checkboxPursuing                Boolean?
  schoolLocation                  String?
  userId                          String                    
  user                            User                      @relation("userToEducation",references: [id],fields: [userId],onDelete: Cascade)
}

model Contact{
  id                              String                    @id@default(cuid())
  userId                          String                    @unique
  user                            User                      @relation("userToContact",references: [id],fields: [userId] ,onDelete: Cascade)
  linkedIn                        String?
  github                          String?
  twitter                         String?
  portfolio                       String?
}

model Achievement{
  id                              String                    @id@default(cuid())
  userId                          String                       
  user                            User                      @relation("userToAchievement",references: [id],fields: [userId],onDelete: Cascade)
  name                            String?
}

model Project{
  id                              String                    @id@default(cuid())
  userId                          String                      
  user                            User                      @relation("userToProject",references: [id],fields: [userId],onDelete: Cascade)
  projectName                     String?
  projectUrl                      String?
  description                     String?                   @db.VarChar(800)    
}

model Language{
  id                              String                     @id@default(cuid())
  userId                          String                       
  user                            User                       @relation("userToLanguage",references: [id],fields: [userId],onDelete: Cascade)
  name                            String?
  strength                        String?
}